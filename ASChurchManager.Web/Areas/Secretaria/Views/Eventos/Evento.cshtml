@using ASChurchManager.Web.Lib

@model ASChurchManager.Web.Areas.Secretaria.ViewModels.Eventos.EventosViewModel

@{
    Layout = "~/Views/Shared/_PopUp.cshtml";
}

@if (!Model.IsReadOnly)
{
    <style type="text/css">
        #CongregacaoId {
            margin-top: 5px;
        }
    </style>
}
else
{
    <style type="text/css">
        .formatLabel {
            font-weight: bold;
            color: darkred
        }
    </style>
}


@using (Html.BeginForm("Persistir", "Eventos", FormMethod.Post, new { id = "frmEventos" }))
{
    <div class="box box-primary">
        <div class="box-header">
            <h4 class="box-title" id="myModalLabel">@Model.Titulo</h4>
        </div>
        @Html.HiddenFor(m => m.Acao)
        @Html.HiddenFor(m => m.Id)
        @Html.HiddenFor(m => m.Tipo)
        @Html.HiddenFor(m => m.IdEventoOriginal)
        @Html.HiddenFor(m => m.CodigoCongregacaoSede)


        <div class="box-body">

            <div class="row">
                <div class="form-group">
                    <div class="col-lg-12">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="row">
                            <div class="col-sm-3">
                                @if (!Model.IsReadOnly)
                                {
                                    <a href="javascript:void(0)" id="lnkBuscarCongregacao" class="control-label">Cód. Congregação</a>
                                }
                                else
                                {
                                    @Html.LabelFor(model => model.CongregacaoId, htmlAttributes: new { @class = "control-label" })
                                }
                                @Html.EditorFor(model => model.CongregacaoId, new { htmlAttributes = Model.IsReadOnly ? (object)new { @disabled = "disabled", @class = "form-control" } : new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CongregacaoId, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-9">
                                @Html.LabelFor(model => model.CongregacaoNome, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.CongregacaoNome, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.CongregacaoNome, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    <div class="col-sm-2">
                        @Html.LabelFor(model => model.DataInicio, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.DataInicio, new { @readonly = "readonly", @class = "form-control datepicker" })
                    </div>
                    <div class="col-sm-2">
                        @Html.LabelFor(model => model.HoraInicio, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.HoraInicio, new { htmlAttributes = Model.IsReadOnly ? (object)new { @disabled = "disabled", @class = "form-control" } : new { @class = "form-control timepicker" } })
                        @Html.ValidationMessageFor(model => model.HoraInicio, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-2">
                        @Html.LabelFor(model => model.HoraFinal, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.HoraFinal, new { htmlAttributes = Model.IsReadOnly ? (object)new { @disabled = "disabled", @class = "form-control" } : new { @class = "form-control timepicker" } })
                        @Html.ValidationMessageFor(model => model.HoraFinal, "", new { @class = "text-danger" })
                    </div>
                    @if (Model.Acao == ASChurchManager.Domain.Types.Acao.Create)
                    {
                        <div class="col-sm-2">
                            @Html.LabelFor(model => model.TipoFrequenciaSelecionado, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(model => model.TipoFrequenciaSelecionado, Model.SelectFrequencia, optionLabel: "", htmlAttributes: Model.IsReadOnly ? (object)new { @disabled = "disabled", @class = "form-control" } : new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TipoFrequenciaSelecionado, "", new { @class = "text-danger" })
                        </div>
                        <div id="quantidade" class="col-sm-2" style="display:none">
                            <br />
                            <div style="margin-top: 5px;">
                                @Html.EditorFor(model => model.Quantidade, new { htmlAttributes = Model.IsReadOnly ? (object)new { @disabled = "disabled", @class = "form-control" } : new { @class = "form-control" } })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.TipoFrequenciaSelecionado)
                        @Html.HiddenFor(m => m.Quantidade)
                    }
                </div>
            </div>
            <div class="row">
                <div class="form-group">
                    <div class="col-sm-4 ">
                        @Html.LabelFor(model => model.TipoEventoSelecionado, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.TipoEventoSelecionado, Model.SelectTiposEvento, "", htmlAttributes: Model.IsReadOnly ? (object)new { @disabled = "disabled", @class = "form-control" } : new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TipoEventoSelecionado, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-8">
                        @Html.LabelFor(model => model.Descricao, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Descricao, new { htmlAttributes = Model.IsReadOnly ? (object)new { @disabled = "disabled", @class = "form-control" } : new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Descricao, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            @if (Model.Tipo != ASChurchManager.Domain.Entities.Evento.TipoEvento.Curso)
            {

                @if (UserAppContext.Current.Usuario.Congregacao.Sede && Model.CodigoCongregacaoSede == Model.CongregacaoId)
                {
                    <div class="row">
                        <div class="form-group">
                            <br />
                            <div class="checkbox col-md-10" id="divCheck">
                                @Html.CheckBoxFor(model => model.AlertarEventoMesmoDia, Model.IsReadOnly ? (object)new { @disabled = "disabled", @class = "form-control", data_toggle = "toggle", data_on = "Sim", data_off = "Não" } : new { @class = "form-control", data_toggle = "toggle", data_on = "Sim", data_off = "Não" })
                                @Html.LabelFor(model => model.AlertarEventoMesmoDia, htmlAttributes: new { @class = "control-label" })
                            </div>
                        </div>
                    </div>
                }
                else if (Model.AlertarEventoMesmoDia)
                {
                    <div class="row">
                        <div class="form-group">
                            <br />
                            <div class="col-md-10">
                                <span class="glyphicon glyphicon-alert"></span>
                                @Html.LabelFor(model => model.AlertarEventoMesmoDia, htmlAttributes: new { @class = "control-label formatLabel" })
                            </div>
                        </div>
                    </div>
                }
            }
            <div class="row">
                <div class="form-group">
                    <div class="col-sm-12">
                        @Html.LabelFor(model => model.Observacoes, htmlAttributes: new { @class = "control-label" })<br>
                        @Html.TextAreaFor(model => model.Observacoes, 5, 110, htmlAttributes: Model.IsReadOnly ? (object)new { @disabled = "disabled", @class = "form-control" } : new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Observacoes, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            @if (Model.Tipo == ASChurchManager.Domain.Entities.Evento.TipoEvento.Curso)
            {
                <div class="row">
                    <div class="col-sm-12">
                        <br />
                        <span class="control-label">* Curso/Evento gerado automaticamente. Para alteração utilizar a rotina de "Configuração" no Menu "Controle de Presença".</span>
                    </div>
                </div>
            }

        </div>
    </div>
    <div class="box-footer">
        <div class="row">
            @if (!Model.IsReadOnly)
            {
                <div style="text-align-last:right" class="col-lg-12">
                    @if (Model.Acao == ASChurchManager.Domain.Types.Acao.Update)
                    {
                        <a href="javascript:void(0)" id="lnkExcluir" class="btn btn-danger">
                            <span class="glyphicon glyphicon-trash" aria-hidden="true"></span> Excluir
                        </a>
                    }
                    <a href="javascript:void(0)" id="lnkSalvar" class="btn btn-primary">
                        <span class="glyphicon glyphicon-save" aria-hidden="true"></span> Salvar
                    </a>
                    <a href="javascript:void(0)" id="lnkFechar" class="btn btn-default">
                        <span class="glyphicon glyphicon-home" aria-hidden="true"></span> Fechar
                    </a>
                </div>
            }
            else
            {
                <div style="text-align-last:right" class="col-lg-12">
                    <a href="javascript:void(0)" id="lnkFechar" class="btn btn-default">
                        <span class="glyphicon glyphicon-home" aria-hidden="true"></span> Fechar
                    </a>
                </div>
            }
        </div>
    </div>

}

<script>
    var urlExcluir = "@Url.Action("Delete", "Eventos", new { Area = "Secretaria" })";
    var urlValDatas = "@Url.Action("ValidarEventosObrigatorio", "Eventos", new { Area = "Secretaria" })";
</script>

@section scripts{
    <script type="text/javascript" src="~/js/eventos.min.js"></script>
}
